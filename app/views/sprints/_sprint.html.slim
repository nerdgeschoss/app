- feedbacks = policy_scope(sprint.sprint_feedbacks).ordered.load
.card id=dom_id(sprint)
  .card__header
    .card__icon 🏃
    .card__header-content
      .card__title = sprint.title
      .card__subtitle = date_range sprint.sprint_from, sprint.sprint_until, format: :long
  - if feedbacks.any?
    .card__content
      table.table
        tr
          th = t(".rated", rating: sprint.average_rating)
          th = t(".daily_nerd")
          th = t(".tracked")
          th = t(".billable")
          th = t(".retro_rating")
        - feedbacks.each do |feedback|
          - users.delete(feedback.user)
          - next if @user.present? && feedback.user_id != @user&.id
          tr
            td: a href=(policy(feedback).edit? ? popover_path(edit_sprint_feedback_path(feedback)) : "")
              div
                strong = feedback.user.display_name
                - if policy(feedback).show_notes? && feedback.review_notes.present?
                  span< title=feedback.review_notes 📝
              div = [feedback.working_day_count, feedback.holiday_count, feedback.sick_day_count].join(" / ")
            td title=feedback.daily_nerd_count = feedback.daily_nerd_count.nil? ? "-" : "#{number_to_percentage feedback.daily_nerd_percentage * 100, precision: 0}"
            td = "#{feedback.tracked_hours&.round(1)} / #{number_with_precision(feedback.tracked_per_day, precision: 1)}"
            td title=number_to_percentage(feedback.billable_hours_percentage * 100, precision: 0) = feedback.billable_hours.nil? ? "-" : "#{feedback.billable_hours.round(1)} / #{number_with_precision feedback.billable_per_day, precision: 1}"
            td = feedback.retro_rating.nil? ? "-" : feedback.retro_rating
        - if policy(sprint).overview?
          tr
            th
              div Total
              div = [sprint.total_working_days, sprint.total_holidays, sprint.total_sick_days].join(" / ")
            th = number_to_percentage sprint.daily_nerd_percentage * 100, precision: 0
            th = "#{sprint.tracked_hours.round(1)} / #{(sprint.tracked_hours / [sprint.total_working_days, 1].max).round(1)}"
            th = "#{sprint.billable_hours.round(1)} / #{(sprint.billable_hours / [sprint.total_working_days, 1].max).round(1)}"
      - if sprint.to_be_rated?
        .feedback
          .feedback__heading = t(".feedback") if feedbacks.map(&:retro_text).any?
          - feedbacks.each do |sprint_feedback|
            - if sprint_feedback.retro_text && sprint_feedback.retro_rating
                .feedback__content
                  strong = t(".user_feedback", user: sprint_feedback.user.display_name, rating: sprint_feedback.retro_rating)
                  = markdown sprint_feedback.retro_text
            - elsif sprint_feedback.user == @user
              .feedback__alert = t(".please_write_feedback")
              = render "sprint_feedbacks/edit_retro", feedback: sprint_feedback
  - if users.any? && policy(SprintFeedback).create?
    .card__buttons
      - users.each do |user|
        = button_to "+ #{user.display_name}", sprint_feedbacks_path(sprint_feedback: {sprint_id: sprint.id, user_id: user.id}), class: "button"
